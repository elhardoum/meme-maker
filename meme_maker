#!./env/bin/python

class meme_maker():
    def __init__(self):
        self.args = None
        self.img = None
        self.parse_args()
        self.run()

    """
    Parses CLI arguments. Used to assert all arguments are handles correctly.
    """
    def parse_args(self):
        import argparse

        parser = argparse.ArgumentParser()

        # required arguments
        required = parser.add_argument_group('required arguments')
        required.add_argument('--text-1', metavar='', help='Top text', type=str, required=True)
        required.add_argument('--text-2', metavar='', help='Bottom text', type=str, required=True)
        required.add_argument('--source', metavar='', help='Meme template image (soure) path', type=lambda s: self.source_validator(s), required=True)

        # optional
        required.add_argument('--dest', metavar='', help='Distination image file path', type=str, required=False)

        # parse arguments
        self.args = vars(parser.parse_args())

    def source_validator(self, source):
        from argparse import ArgumentTypeError

        if not source or str != type(source):
            raise ArgumentTypeError("%s is an invalid image source path" % str(source))

        from PIL import Image

        try:
            self.img = Image.open( source )
        except Exception as e:
            raise ArgumentTypeError("Error loading image %s: %s" % (str(source), str(e)))

        return source

    def run(self):
        if not self.img:
            print ( 'Error, arguments not parsed correctly.' )
            return

        from PIL import ImageFont, ImageDraw

        font_path = './Impact.ttf'
        imageSize = self.img.size
        draw = ImageDraw.Draw(self.img)

        lines1 = [ x.strip() for x in self.args['text_1'].upper().split('\n') if x.strip() ]
        lines2 = [ x.strip() for x in self.args['text_2'].upper().split('\n') if x.strip() ]

        fontSize = int(imageSize[1]/5)
        font = ImageFont.truetype(font_path, fontSize)
        fontSizes = []
        textSizes = {}

        for line in lines1 + lines2:
            textSize = font.getsize(line)
            while textSize[0] > imageSize[0]-20:
                fontSize = fontSize - 1
                font = ImageFont.truetype(font_path, fontSize)
                textSize = textSizes[ fontSize ] = font.getsize(line)
                fontSizes.append( fontSize )

        font = ImageFont.truetype( font_path, min(fontSizes) )

        index=0
        for line in lines1:
            # find top centered position for top text
            topTextPositionX = (imageSize[0]/2) - (font.getsize(line)[0]/2)
            topTextPositionY = index *font.getsize(line)[1]
            topTextPosition = (topTextPositionX, topTextPositionY)

            # draw outlines
            outlineRange = int(fontSize/15)
            for x in range(-outlineRange, outlineRange+1):
                for y in range(-outlineRange, outlineRange+1):
                    draw.text((topTextPosition[0]+x, topTextPosition[1]+y), line, 'black', font=font)

            draw.text(topTextPosition, line, 'white', font=font)
            index += 1

        index=0
        for line in reversed(lines2):
            # find top centered position for top text
            bottomTextPositionX = (imageSize[0]/2) - (font.getsize(line)[0]/2)
            bottomTextPositionY = imageSize[1] - font.getsize(line)[1] *(index+1) -5
            bottomTextPositionY -= 3 if index else 0
            bottomTextPosition = (bottomTextPositionX, bottomTextPositionY)

            # draw outlines
            outlineRange = int(fontSize/15)
            for x in range(-outlineRange, outlineRange+1):
                for y in range(-outlineRange, outlineRange+1):
                    draw.text((bottomTextPosition[0]+x, bottomTextPosition[1]+y), line, 'black', font=font)

            draw.text(bottomTextPosition, line, 'white', font=font)
            index += 1

        if 'dest' in self.args and self.args['dest']:
            try:
                self.img.save( self.args['dest'] )
                from os.path import realpath
                print ( 'Image saved to %s' % ( str( realpath( self.args['dest'] ) ) ) )
            except Exception as e:
                print ( 'Error saving image to destination (%s): %s', ( self.args['dest'], str(e) ) )
        else:
            # show in a window
            self.img.show()

if '__main__' == __name__:
    meme_maker = meme_maker()
